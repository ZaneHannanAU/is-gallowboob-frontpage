var Options
if (location.search.indexOf('?') === 0) {
	var points = decodeURIComponent(location.search.slice(1)).split('&')
	points.forEach((s, i) => {
		points[i] = s.split('=')
		points[i][0] = points[i][0].toLocaleLowerCase()
	})
	Options = new Map(points)
} else {
	Options = new Map()
}

const qs = q => document.querySelector(q)
const qsa = qa => document.querySelectorAll(qa)
const ce = el => document.createElement(el)
const cn = nd => nd.cloneNode(true)

var posts = qs('#posts'),
	allusers = qs('#allusers'),
	answer = qs('#answer'),
	title = qs('#title'),
	users = qs('#users'),
	limit = parseInt(Options.get('limit') || 50),
	sr = Options.get('sr') || 'all',
	user = Options.get('user') || 'GallowBoob',
	isFront = false,
	Ea = ce('a'),
	Ediv = ce('div'),
	Edt = ce('dt'),
	Edd = ce('dd'),
	un, pt, li, div, dt, dd, loggable = [], allUsers = []

title.innerHTML = `Is <a href="https://www.reddit.com/u/${user}">/u/${user}</a> on the front page of ${sr === 'all' ? 'reddit' : `<a href="https://www.reddit.com/r/${sr}">r/${sr}</a>`}?`
document.title = title.innerText

qs('#limit').value = limit
qs('#user').value = user
qs('#sr').value = sr


var addPost = (post, i, array, father) => {
		un = cn(Ea) // username
		pt = cn(Ea) // post title
		dt = cn(Edt) // desc
		dd = cn(Edd) // desc
		div = cn(Ediv) // contain

		div.dataset.score = post.data.score
		div.dataset.rank = 1+i
		div.dataset.sr = post.data.subreddit

		un.href = `https://www.reddit.com/u/${post.data.author}`
		un.innerText = `/u/${post.data.author}`
		dt.appendChild(un)
		div.appendChild(dt)

		pt.href = `https://www.reddit.com${post.data.permalink}`
		pt.innerHTML = post.data.title

		dd.appendChild(pt)
		div.appendChild(dd)
		return father.appendChild(div)
	}

fetch(`https://www.reddit.com/r/${sr}/.json?limit=${limit}`)
	.then(res => res.json())
	.then(postList => postList.data.children.forEach((post, i) => {
		loggable.push(post)
		if (post.data.author.toLocaleLowerCase() === user.toLocaleLowerCase()) {
			addPost(post, i, [], posts)
			isFront = true
		}
	}))
	.then(() => {
		answer.innerText = isFront ? 'Yes:' : 'No.'
		console.log(loggable)
		loggable.forEach((post, i, posts) => addPost(post, i, posts, users))
		allusers.innerHTML = `The top ${loggable.length} users on <a href="https://www.reddit.com/r/${sr}">r/${sr}</a> in default sort:`
	})
